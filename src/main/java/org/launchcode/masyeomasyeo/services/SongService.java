package org.launchcode.masyeomasyeo.services;

import org.launchcode.masyeomasyeo.exceptions.RecordNotFoundException;
import org.launchcode.masyeomasyeo.models.Song;
import org.launchcode.masyeomasyeo.models.data.SongDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import javax.persistence.NamedQuery;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.xml.bind.JAXBException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import java.util.*;
import javax.persistence.*;
import org.hibernate.*;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

//This is the Service class to provide basic services for manipulating and retrieving Song.
// This works as a wrapper over SongDao. Song controller is referencing this service by @Autowired.
// It is better practice to use Service classes instead of Controller classes directly to handle database operations.

@Service
public class SongService implements ISongService {

    @Autowired // This means to get the bean called songDao
    // Which is auto-generated by Spring, we will use it to handle the data
    private SongDao songDao;

    public List<Song> getAllSongs(Integer pageNo, Integer pageSize, String sortBy, Integer asc)
    {
        Pageable paging;
        if(asc %2 == 0)
            paging = PageRequest.of(pageNo, pageSize, Sort.by(sortBy).descending());
        else
            paging = PageRequest.of(pageNo, pageSize, Sort.by(sortBy).ascending());

            Page<Song> pagedResult = songDao.findAll(paging);

        if(pagedResult.hasContent()) {
            return pagedResult.getContent();
        } else {
            return new ArrayList<Song>();
        }

    }

/*    TypedQuery query = session.getNamedQuery("findEmployeeByName");
            query.setParameter("name","amit");

    List<Employee> employees=query.getResultList();*/

    @Override
    public List<Song> findRecs(String mkey, Integer tempo1, Integer tempo2) {
        var songs = (List<Song>) songDao.findRecs(mkey, tempo1, tempo2);
        return songs;
    }

/*    public List<Song> findRecs(int id) throws RecordNotFoundException
    {
        //Optional<Song> song = songDao.findById(id);
        Song song = songDao.findById(id).orElse(null);
        if(song != null) {
        Integer songtempo = song.getTempo();
        String songkey = song.getMkey();
        //TypedQuery query = (Query) songDao.getNamedQuery("findRecs");
            var songlist = (List<Song>) songDao.findRecs(id);
        songlist.setParameter(1,"7G");
        query.setParameter(2, songtempo - 30);
        query.setParameter(3,songtempo+30);
        List<Song> songlist = query.getResultList();
            return songlist;
        } else {
            throw new RecordNotFoundException("No song record exist for given id");
        }
    */

    //public void process(List<String> filePath) throws JAXBException;

    //TODO: Consider replacing the methods I'm using in SongController to edit and delete with these
    public Song getSongById(int id) throws RecordNotFoundException
    {
        Optional<Song> song = songDao.findById(id);

        if(song.isPresent()) {
            return song.get();
        } else {
            throw new RecordNotFoundException("No song record exist for given id");
        }
    }

    public Song createOrUpdateSong(Song entity) throws RecordNotFoundException
    {
        Optional<Song> song = songDao.findById(entity.getId());

        if(song.isPresent())
        {
            Song newEntity = song.get();
            newEntity.setTempo(entity.getTempo());
            newEntity.setMkey(entity.getMkey());
            newEntity.setName(entity.getName());

            newEntity = songDao.save(newEntity);

            return newEntity;
        } else {
            entity = songDao.save(entity);

            return entity;
        }
    }

    public void deleteSongById(int id) throws RecordNotFoundException
    {
        Optional<Song> song = songDao.findById(id);

        if(song.isPresent())
        {
            songDao.deleteById(id);
        } else {
            throw new RecordNotFoundException("No song record exist for given id");
        }
    }

}
