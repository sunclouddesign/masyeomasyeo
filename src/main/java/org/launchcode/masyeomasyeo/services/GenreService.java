package org.launchcode.masyeomasyeo.services;

import org.launchcode.masyeomasyeo.exceptions.RecordNotFoundException;
import org.launchcode.masyeomasyeo.models.Genre;
import org.launchcode.masyeomasyeo.models.data.GenreDao;
import org.launchcode.masyeomasyeo.models.data.GenreDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class GenreService {
    @Autowired // This means to get the bean called genreDao
    // Which is auto-generated by Spring, we will use it to handle the data
    private GenreDao genreDao;

    public List<Genre> getAllGenres(Integer pageNo, Integer pageSize, String sortBy)
    {
        Pageable paging = PageRequest.of(pageNo, pageSize, Sort.by(sortBy));

        Page<Genre> pagedResult = genreDao.findAll(paging);

        if(pagedResult.hasContent()) {
            return pagedResult.getContent();
        } else {
            return new ArrayList<Genre>();
        }
    }

    public Genre getGenreById(int id) throws RecordNotFoundException
    {
        Optional<Genre> genre = genreDao.findById(id);

        if(genre.isPresent()) {
            return genre.get();
        } else {
            throw new RecordNotFoundException("No genre record exist for given id");
        }
    }

    public Genre createOrUpdateGenre(Genre entity) throws RecordNotFoundException
    {
        Optional<Genre> genre = genreDao.findById(entity.getId());

        if(genre.isPresent())
        {
            Genre newEntity = genre.get();
            newEntity.setName(entity.getName());

            newEntity = genreDao.save(newEntity);

            return newEntity;
        } else {
            entity = genreDao.save(entity);

            return entity;
        }
    }

    public void deleteGenreById(int id) throws RecordNotFoundException {
        Optional<Genre> genre = genreDao.findById(id);

        if (genre.isPresent()) {
            genreDao.deleteById(id);
        } else {
            throw new RecordNotFoundException("No genre record exist for given id");
        }
    }

}
